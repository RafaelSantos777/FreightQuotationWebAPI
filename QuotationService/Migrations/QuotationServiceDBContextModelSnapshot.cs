// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuotationService.Repositories;

#nullable disable

namespace QuotationService.Migrations
{
    [DbContext(typeof(QuotationServiceDBContext))]
    partial class QuotationServiceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuotationService.Models.Entities.AirQuote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AirQuoteResponseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("SpecialHandlingCodeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AirQuoteResponseId");

                    b.HasIndex("SpecialHandlingCodeId");

                    b.ToTable("AirQuotes");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.AirQuoteRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<long>("DestinationAirportId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("HeightCentimeters")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("LengthCentimeters")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("OriginAirportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpecialHandlingCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("WeightKilograms")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WidthCentimeters")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("OriginAirportId");

                    b.HasIndex("SpecialHandlingCodeId");

                    b.ToTable("AirQuoteRequests");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.AirQuoteResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AirQuoteRequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AirQuoteRequestId");

                    b.ToTable("AirQuoteResponses");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasDiscriminator<string>("Type").HasValue("Location");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuotationService.Models.Entities.SpecialHandlingCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("SpecialHandlingCodes");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.Airport", b =>
                {
                    b.HasBaseType("QuotationService.Models.Entities.Location");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasIndex("IATACode")
                        .IsUnique()
                        .HasFilter("[IATACode] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Airport");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.Seaport", b =>
                {
                    b.HasBaseType("QuotationService.Models.Entities.Location");

                    b.Property<long>("CargofiveLocationId")
                        .HasColumnType("bigint");

                    b.HasIndex("CargofiveLocationId")
                        .IsUnique()
                        .HasFilter("[CargofiveLocationId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Seaport");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.AirQuote", b =>
                {
                    b.HasOne("QuotationService.Models.Entities.AirQuoteResponse", null)
                        .WithMany("AirQuotes")
                        .HasForeignKey("AirQuoteResponseId");

                    b.HasOne("QuotationService.Models.Entities.SpecialHandlingCode", "SpecialHandlingCode")
                        .WithMany()
                        .HasForeignKey("SpecialHandlingCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecialHandlingCode");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.AirQuoteRequest", b =>
                {
                    b.HasOne("QuotationService.Models.Entities.Airport", "DestinationAirport")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuotationService.Models.Entities.Airport", "OriginAirport")
                        .WithMany()
                        .HasForeignKey("OriginAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuotationService.Models.Entities.SpecialHandlingCode", "SpecialHandlingCode")
                        .WithMany()
                        .HasForeignKey("SpecialHandlingCodeId");

                    b.Navigation("DestinationAirport");

                    b.Navigation("OriginAirport");

                    b.Navigation("SpecialHandlingCode");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.AirQuoteResponse", b =>
                {
                    b.HasOne("QuotationService.Models.Entities.AirQuoteRequest", "AirQuoteRequest")
                        .WithMany()
                        .HasForeignKey("AirQuoteRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirQuoteRequest");
                });

            modelBuilder.Entity("QuotationService.Models.Entities.AirQuoteResponse", b =>
                {
                    b.Navigation("AirQuotes");
                });
#pragma warning restore 612, 618
        }
    }
}
